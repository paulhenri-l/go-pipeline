// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/paulhenri-l/go-pipeline/contracts (interfaces: Timestamped)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTimestamped is a mock of Timestamped interface.
type MockTimestamped struct {
	ctrl     *gomock.Controller
	recorder *MockTimestampedMockRecorder
}

// MockTimestampedMockRecorder is the mock recorder for MockTimestamped.
type MockTimestampedMockRecorder struct {
	mock *MockTimestamped
}

// NewMockTimestamped creates a new mock instance.
func NewMockTimestamped(ctrl *gomock.Controller) *MockTimestamped {
	mock := &MockTimestamped{ctrl: ctrl}
	mock.recorder = &MockTimestampedMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTimestamped) EXPECT() *MockTimestampedMockRecorder {
	return m.recorder
}

// GetTimestamp mocks base method.
func (m *MockTimestamped) GetTimestamp() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimestamp")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetTimestamp indicates an expected call of GetTimestamp.
func (mr *MockTimestampedMockRecorder) GetTimestamp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimestamp", reflect.TypeOf((*MockTimestamped)(nil).GetTimestamp))
}
