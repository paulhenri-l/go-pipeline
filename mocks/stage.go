// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/paulhenri-l/go-pipeline/contracts (interfaces: Stage,MapStage,FilterStage,FlatMapStage)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStage is a mock of Stage interface.
type MockStage struct {
	ctrl     *gomock.Controller
	recorder *MockStageMockRecorder
}

// MockStageMockRecorder is the mock recorder for MockStage.
type MockStageMockRecorder struct {
	mock *MockStage
}

// NewMockStage creates a new mock instance.
func NewMockStage(ctrl *gomock.Controller) *MockStage {
	mock := &MockStage{ctrl: ctrl}
	mock.recorder = &MockStageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStage) EXPECT() *MockStageMockRecorder {
	return m.recorder
}

// Name mocks base method.
func (m *MockStage) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockStageMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockStage)(nil).Name))
}

// Start mocks base method.
func (m *MockStage) Start(arg0 context.Context, arg1 <-chan interface{}) <-chan interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", arg0, arg1)
	ret0, _ := ret[0].(<-chan interface{})
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockStageMockRecorder) Start(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockStage)(nil).Start), arg0, arg1)
}

// MockMapStage is a mock of MapStage interface.
type MockMapStage struct {
	ctrl     *gomock.Controller
	recorder *MockMapStageMockRecorder
}

// MockMapStageMockRecorder is the mock recorder for MockMapStage.
type MockMapStageMockRecorder struct {
	mock *MockMapStage
}

// NewMockMapStage creates a new mock instance.
func NewMockMapStage(ctrl *gomock.Controller) *MockMapStage {
	mock := &MockMapStage{ctrl: ctrl}
	mock.recorder = &MockMapStageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMapStage) EXPECT() *MockMapStageMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockMapStage) Process(arg0 interface{}) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", arg0)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Process indicates an expected call of Process.
func (mr *MockMapStageMockRecorder) Process(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockMapStage)(nil).Process), arg0)
}

// MockFilterStage is a mock of FilterStage interface.
type MockFilterStage struct {
	ctrl     *gomock.Controller
	recorder *MockFilterStageMockRecorder
}

// MockFilterStageMockRecorder is the mock recorder for MockFilterStage.
type MockFilterStageMockRecorder struct {
	mock *MockFilterStage
}

// NewMockFilterStage creates a new mock instance.
func NewMockFilterStage(ctrl *gomock.Controller) *MockFilterStage {
	mock := &MockFilterStage{ctrl: ctrl}
	mock.recorder = &MockFilterStageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilterStage) EXPECT() *MockFilterStageMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockFilterStage) Process(arg0 interface{}) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Process indicates an expected call of Process.
func (mr *MockFilterStageMockRecorder) Process(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockFilterStage)(nil).Process), arg0)
}

// MockFlatMapStage is a mock of FlatMapStage interface.
type MockFlatMapStage struct {
	ctrl     *gomock.Controller
	recorder *MockFlatMapStageMockRecorder
}

// MockFlatMapStageMockRecorder is the mock recorder for MockFlatMapStage.
type MockFlatMapStageMockRecorder struct {
	mock *MockFlatMapStage
}

// NewMockFlatMapStage creates a new mock instance.
func NewMockFlatMapStage(ctrl *gomock.Controller) *MockFlatMapStage {
	mock := &MockFlatMapStage{ctrl: ctrl}
	mock.recorder = &MockFlatMapStageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlatMapStage) EXPECT() *MockFlatMapStageMockRecorder {
	return m.recorder
}

// Process mocks base method.
func (m *MockFlatMapStage) Process(arg0 context.Context, arg1 interface{}) <-chan interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Process", arg0, arg1)
	ret0, _ := ret[0].(<-chan interface{})
	return ret0
}

// Process indicates an expected call of Process.
func (mr *MockFlatMapStageMockRecorder) Process(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Process", reflect.TypeOf((*MockFlatMapStage)(nil).Process), arg0, arg1)
}
